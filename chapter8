リアルタイム処理
after(ミリ秒, 実行する関数) 
import tkinter
tmr = 0
def count_up():
    global tmr
    tmr = tmr + 1
    label["text"] = tmr
    root.after(1000, count_up)　　引数の関数名は()をつけずに記述します、count_up()

root = tkinter.Tk()
label = tkinter.Label(font=("Times New Roman", 80))
label.pack()
root.after(1000, count_up)
root.mainloop()


キー入力を受け付ける(実行した後に適当なキーを押すと数字がshellに表示される)
import tkinter
key = 0
def key_down(e):
    global key
    key = e.keycode　　　　　　　　　　　　押されたキーのコードをkeyに代入
    print("KEY:"+str(key))

root = tkinter.Tk()
root.title("キーコードを取得")
root.bind("<KeyPress>",key_down)　　　　　bind()命令でキーを押したときに実行する関数を指定
root.mainloop()

bind("<イベント>",イベント発生時に実行する関数名)
<KeyPress>または<Key>   キーを押した
<KeyRelease>　　　　　　　キーを離した
<Motion>　　　　　　　　　マウスポインタを動かした
<ButtonPress>あるいは<Button>　マウスボタンをクリックした


リアルタイムキー入力
import tkinter

key = 0
def key_down(e):
    global key
    key = e.keycode

def main_proc():
    label["text"] = key
    root.after(100, main_proc)   0.1秒後に実行する関数を指定

root = tkinter.Tk()
root.title("リアルタイムキー入力")
root.bind("<KeyPress>",key_down)
label = tkinter.Label(font=("Times New Roman", 80))
label.pack()
main_proc()
root.mainloop()



keysymの値で判定する(今までキー入力すると数字が出てきたが、押したキーがそのまま出てくる。aとbとか)
import tkinter

key = ""
def key_down(e):
    global key
    key = e.keysym

def main_proc():
    label["text"] = key
    root.after(100, main_proc)
    
root = tkinter.Tk()
root.title("リアルタイムキー入力")
root.bind("<KeyPress>",key_down)
label = tkinter.Label(font=("Times New Roman", 80))
label.pack()
main_proc()
root.mainloop()



リアルタイムにキャラクターを動かす(矢印ボタンで動く)
import tkinter

key = ""
def key_down(e):
    global key
    key = e.keysym
def key_up(e):
    global key
    key = ""

cx = 400
cy = 300
def main_proc():
    global cx, cy
    if key == "Up":
        cy = cy - 20
    if key == "Down":
        cy = cy + 20
    if key == "Left":
        cx = cx - 20
    if key == "Right":
        cx = cx + 20
    canvas.coords("MYCHR",cx,cy)　　coords()は表示中の画像を新しい位置に移動する命令
    root.after(100,main_proc)
    
root = tkinter.Tk()
root.title("キャラクターの移動")
root.bind("<KeyPress>",key_down)
root.bind("<KeyRelease>",key_up)
canvas = tkinter.Canvas(width=800, height=600,bg="lightgreen")
canvas.pack()
img = tkinter.PhotoImage(file="mimi.png")
canvas.create_image(cx, cy, image=img, tag="MYCHR")　　
　　　　　tagはキャンバスに描画する図形や画像につけることが出来、図形や画像を動かしたいときに使う
main_proc()
root.mainloop()


迷路のデータを定義する
二次元のリストについて
m[y][x] でy行x列の行列
import tkinter
root = tkinter.Tk()
root.title("迷路の表示")
canvas = tkinter.Canvas(width=800,height=560,bg="white")
canvas.pack()
maze = [
    [1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,1,0,0,1],
    [1,0,1,1,0,0,1,0,0,1],
    [1,0,0,1,0,0,0,0,0,1],
    [1,0,0,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1]
    ]
for y in range(7):　　　　　　　y軸に7回繰り替す
    for x in range(10):　　　　xで10回繰り替えす
        if maze[y][x] == 1:　　　行列の成分が1なら
            canvas.create_rectangle(x*80,y*80,x*80+80,y*80+80,fill="gray")　　灰色を表示
root.mainloop()
二重ループのforについて
for 変数1 in 変数1の範囲:
    for 変数2 in 変数2の範囲:
        処理のブロック
        
       
       
迷路の中を歩く
import tkinter

key = ""
def key_down(e):
    global key
    key = e.keysym
def key_up(e):
    global key
    key = ""

mx = 1
my = 1
def main_proc():
    global mx,my
    if key == "Up" and maze[my-1][mx] == 0:     方向キーの上が押され、かつ、現在位置の上のマスが0(床)であれば
        my = my - 1
    if key == "Down" and maze[my+1][mx] == 0:
        my = my + 1
    if key == "Left" and maze[my][mx-1] == 0:
        mx = mx - 1
    if key == "Right" and maze[my][mx+1] == 0: 
        mx = mx + 1
    canvas.coords("MYCHR",mx*80+40, my*80+40)
    root.after(300, main_proc)

root = tkinter.Tk()
root.title("迷路内を移動する")
root.bind("<KeyPress>",key_down)
root.bind("<KeyRelease>",key_up)
canvas = tkinter.Canvas(width=800,height=560,bg="white")
canvas.pack()

maze = [
    [1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,1,0,0,1],
    [1,0,1,1,0,0,1,0,0,1],
    [1,0,0,1,0,0,0,0,0,1],
    [1,0,0,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1]
    ]
for y in range(7):
    for x in range(10):
        if maze[y][x] == 1:
            canvas.create_rectangle(x*80,y*80,x*80+80,y*80+80,fill="skyblue",width=0)

img = tkinter.PhotoImage(file="mimi_s.png")
canvas.create_image(mx*80+40, my*80+40,image=img,tag="MYCHR")
main_proc()
root.mainloop()
例えば平原を0、樹海を1、水面を2などとしてより複雑にしたりする
