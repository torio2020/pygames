マウス入力を組み込む
import tkinter

mouse_x = 0
mouse_y = 0
mouse_c = 0

def mouse_move(e):
    global mouse_x, mouse_y
    mouse_x = e.x
    mouse_y = e.y

def mouse_press(e):
    global mouse_c
    mouse_c = 1

def mouse_release(e):
    global mouse_c
    mouse_c = 0

def game_main():
    fnt = ("Times New Roman", 30)
    txt = "mouse({},{}){}".format(mouse_x, mouse_y, mouse_c)
    cvs.delete("TEST")
    cvs.create_text(456, 384, text=txt,fill="black",font=fnt,tag="TEST")
    root.after(100, game_main)

root = tkinter.Tk()
root.title("マウス入力")
root.resizable(False,False)
root.bind("<Motion>", mouse_move)
root.bind("<ButtonPress>",mouse_press)
root.bind("<ButtonRelease>",mouse_release)
cvs = tkinter.Canvas(root,width=912,height=768)
cvs.pack()
game_main()
root.mainloop()


ゲーム画面のサイズを設計する
import tkinter

cursor_x = 0
cursor_y = 0
mouse_x = 0
mouse_y = 0

def mouse_move(e):
    global mouse_x, mouse_y
    mouse_x = e.x
    mouse_y = e.y

def game_main():
    global cursor_x, cursor_y
    if 24 <= mouse_x and mouse_x < 24+72*8 and 24 <= mouse_y and mouse_y < 24+72*10:
        cursor_x = int((mouse_x-24)/72)
        cursor_y = int((mouse_y-24)/72)
    cvs.delete("CURSOR")
    cvs.create_image(cursor_x*72+60, cursor_y*72+60, image=cursor, tag="CURSOR")
    root.after(100, game_main)

root = tkinter.Tk()
root.title("カーソルの表示")
root.resizable(False, False)
root.bind("<Motion>", mouse_move)
cvs = tkinter.Canvas(root, width=912, height=768)
cvs.pack()

bg = tkinter.PhotoImage(file="neko_bg.png")
cursor = tkinter.PhotoImage(file="neko_cursor.png")
cvs.create_image(456, 384, image=bg)
game_main()
root.mainloop()
    

マス上のデータを管理する
import tkinter

neko = [
[1, 0, 0, 0, 0, 0, 7, 7],
[0, 2, 0, 0, 0, 0, 7, 7],
[0, 0, 3, 0, 0, 0, 0, 0],
[0, 0, 0, 4, 0, 0, 0, 0],
[0, 0, 0, 0, 5, 0, 0, 0],
[0, 0, 0, 0, 0, 6, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 2, 3, 4, 5, 6]
]

def draw_neko():ネコを表示する関数
    for y in range(10):繰り返し yは0から9まで1ずつ増える
        for x in range(8):繰り返し xは0から7まで1ずつ増える
            if neko[y][x] > 0:リストの要素の値が0より大きいなら
                cvs.create_image(x*72+60, y*72+60, image=img_neko[neko[y][x]])ネコの画像を表示

root = tkinter.Tk()
root.title("二次元リストでマスを管理する")
root.resizable(False, False)
cvs = tkinter.Canvas(root, width=912, height=768)
cvs.pack()

bg = tkinter.PhotoImage(file="neko_bg.png")
img_neko = [
    None,
    tkinter.PhotoImage(file="neko1.png"),
    tkinter.PhotoImage(file="neko2.png"),
    tkinter.PhotoImage(file="neko3.png"),
    tkinter.PhotoImage(file="neko4.png"),
    tkinter.PhotoImage(file="neko5.png"),
    tkinter.PhotoImage(file="neko6.png"),
    tkinter.PhotoImage(file="neko_niku.png")
]

cvs.create_image(456, 384, image=bg)
draw_neko()
root.mainloop()


ブロックを落下させるアルゴリズム
リストの値を調べる
エラーは出ないけど落下しない！
import tkinter

neko = [
[1, 0, 0, 0, 0, 0, 1, 2],
[0, 2, 0, 0, 0, 0, 3, 4],
[0, 0, 3, 0, 0, 0, 0, 0],
[0, 0, 0, 4, 0, 0, 0, 0],
[0, 0, 0, 0, 5, 0, 0, 0],
[0, 0, 0, 0, 0, 6, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 2, 3, 4, 0, 0]
]

def draw_neko():
    for y in range(10):
        for x in range(8):
            if neko[y][x] > 0:
                cvs.create_image(x*72+60, y*72+60, image=img_neko[neko[y][x]], tag="NEKO")

def drop_neko():ネコを落下させる関数
    for y in range(8, -1, -1):繰り返し yは8から0まで1ずつ減る
        for x in range(8):繰り返し xは0から7まで1ずつ増える
            if neko[y][x] != 0 and neko[y+1][x] == 0:ネコのあるマスの下が空白なら
                neko[y+1][x] = neko[y][x]空白にネコを入れ
                neko[y][x] = 0元のネコのマスは空白にする

def game_main():
    drop_neko()ネコを落下させる関数を呼び出す
    cvs.delete("NEKO")ネコの画像を削除
    draw_neko()ネコを表示
    root.after(100, game_main)0.1秒後に再びメインの処理を実行

root = tkinter.Tk()
root.title("ネコを落下させる")
root.resizable(False, False)
cvs = tkinter.Canvas(root, width=912, height=768)
cvs.pack()

bg = tkinter.PhotoImage(file="neko_bg.png")
img_neko = [
    None,
    tkinter.PhotoImage(file="neko1.png"),
    tkinter.PhotoImage(file="neko2.png"),
    tkinter.PhotoImage(file="neko3.png"),
    tkinter.PhotoImage(file="neko4.png"),
    tkinter.PhotoImage(file="neko5.png"),
    tkinter.PhotoImage(file="neko6.png"),
    tkinter.PhotoImage(file="neko_niku.png")
]

cvs.create_image(456, 384, image=bg)
game_main()
root.mainloop()

クリックしてブロックを置く
import tkinter
import random

cursor_x = 0  カーソルの横方向の位置（左から何マス目か）
cursor_y = 0  縦（上）
mouse_x = 0  マウスポインタのx座標
mouse_y = 0  マウスポインタのy座標
mouse_c = 0  マウスボタンをクリックした時の変数(フラグ)

def mouse_move(e):
    global mouse_x, mouse_y
    mouse_x = e.x  mouse_xにマウスポインタのx座標を代入
    mouse_y = e.y  mouse_yにマウスポインタのy座標を代入

def mouse_press(e):
    global mouse_c
    mouse_c = 1

neko = [
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0]
]

def draw_neko():
    for y in range(10):
        for x in range(8):
            if neko[y][x] > 0:
                cvs.create_image(x*72+60, y*72+60, image=img_neko[neko[y][x]], tag="NEKO") ネコの画像を表示

def drop_neko():
    for y in range(8, -1, -1): yは8から0まで1ずつ減る
        for x in range(8): 0から7まで1ずつ増える
            if neko[y][x] != 0 and neko[y+1][x] == 0:ネコのあるマスの下が空白なら
                neko[y+1][x] = neko[y][x]空白にネコを入れ
                neko[y][x] = 0元のネコのマスは空白にする

def game_main():
    global cursor_x, cursor_y ,mouse_c
    drop_neko()
    if 24 <= mouse_x and mouse_x < 24+72*8 and 24 <= mouse_y and mouse_y < 24+72*10:マウスポインタの座標が盤面上であれば
        cursor_x = int((mouse_x)/72)  ポインタのx座標からカーソルの横の位置を計算
        cursor_y = int((mouse_y)/72)  
        if mouse_c == 1:  マウスボタンをクリックしたら
            mouse_c =0  クリックしたフラグを解除
            neko[cursor_y][cursor_x] = random.randint(1,6)  カーソルのマスにランダムにネコを配置
    cvs.delete("CURSOR")   カーソルを消し
    cvs.create_image(cursor_x*72+60, cursor_y*72+60, image=cursor, tag="CURSOR")  新な位置にカーソルを表示する
    cvs.delete("NEKO")
    draw_neko()
    root.after(100, game_main)  0.1秒後に再びメインの処理を実行

root = tkinter.Tk()
root.title("クリックしてネコを置く")
root.resizable(False, False)
root.bind("<Motion>", mouse_move)
root.bind("<ButtonPress>",mouse_press)
cvs = tkinter.Canvas(root, width=912, height=768)
cvs.pack()

bg = tkinter.PhotoImage(file="neko_bg.png")
cursor = tkinter.PhotoImage(file="neko_cursor.png")
img_neko = [
    None,
    tkinter.PhotoImage(file="neko1.png"),
    tkinter.PhotoImage(file="neko2.png"),
    tkinter.PhotoImage(file="neko3.png"),
    tkinter.PhotoImage(file="neko4.png"),
    tkinter.PhotoImage(file="neko5.png"),
    tkinter.PhotoImage(file="neko6.png"),
    tkinter.PhotoImage(file="neko_niku.png")
]

cvs.create_image(456, 384, image=bg)
game_main()
root.mainloop()

ブロックが揃ったか判定するアルゴリズム
import tkinter
import random

cursor_x = 0
cursor_y = 0
mouse_x = 0
mouse_y = 0
mouse_c = 0

def mouse_move(e):
    global mouse_x, mouse_y
    mouse_x = e.x
    mouse_y = e.y

def mouse_press(e):
    global mouse_c
    mouse_c = 1

neko = []マス目を管理する二次元リスト
for i in range(10):繰り返しと
    neko.append([0,0,0,0,0,0,0,0])  append()命令でリストを初期化する

def draw_neko():
    for y in range(10):
        for x in range(8):
            if neko[y][x] > 0:
                cvs.create_image(x*72+60, y*72+60, image=img_neko[neko[y][x]], tag="NEKO")

def yoko_neko():ネコが横に3つ並んだか調べる関数
    for y in range(10):
        for x in range(1, 7):
            if neko[y][x] > 0:マスにネコが配置されていて
                if neko[y][x-1] == neko[y][x] and neko[y][x+1] == neko[y][x]:左右が同じネコなら
                    neko[y][x-1] = 7
                    neko[y][x] =7
                    neko[y][x+1] = 7

def game_main():
    global cursor_x, cursor_y ,mouse_c
    if 660 <= mouse_x and mouse_x < 840 and 100 <= mouse_y and mouse_y < 160 and mouse_c == 1:
    風船内の「テスト」という文字をクリックしたら
        mouse_c = 0  クリックしたフラグを解除
        yoko_neko()   
    if 24 <= mouse_x and mouse_x < 24+72*8 and 24 <= mouse_y and mouse_y < 24+72*10:
        cursor_x = int((mouse_x)/72)
        cursor_y = int((mouse_y)/72)  
        if mouse_c == 1:
            mouse_c =0
            neko[cursor_y][cursor_x] = random.randint(1, 2)
    cvs.delete("CURSOR")
    cvs.create_image(cursor_x*72+60, cursor_y*72+60, image=cursor, tag="CURSOR")
    cvs.delete("NEKO")
    draw_neko()
    root.after(100, game_main)

root = tkinter.Tk()
root.title("横に3つ並んだか")
root.resizable(False, False)
root.bind("<Motion>", mouse_move)
root.bind("<ButtonPress>",mouse_press)
cvs = tkinter.Canvas(root, width=912, height=768)
cvs.pack()

bg = tkinter.PhotoImage(file="neko_bg.png")
cursor = tkinter.PhotoImage(file="neko_cursor.png")
img_neko = [
    None,
    tkinter.PhotoImage(file="neko1.png"),
    tkinter.PhotoImage(file="neko2.png"),
    tkinter.PhotoImage(file="neko3.png"),
    tkinter.PhotoImage(file="neko4.png"),
    tkinter.PhotoImage(file="neko5.png"),
    tkinter.PhotoImage(file="neko6.png"),
    tkinter.PhotoImage(file="neko_niku.png")
]

cvs.create_image(456, 384, image=bg)
cvs.create_rectangle(660, 100, 840, 160, fill = "white")
cvs.create_text(750, 130, text="テスト", fill="red", font=("Times New Roman", 30))
game_main()
root.mainloop()


縦、横、斜めに3つ以上ブロックが揃ったことを正確に判定するアルゴリズム
import tkinter
import random

cursor_x = 0
cursor_y = 0
mouse_x = 0
mouse_y = 0
mouse_c = 0

def mouse_move(e):
    global mouse_x, mouse_y
    mouse_x = e.x
    mouse_y = e.y

def mouse_press(e):
    global mouse_c
    mouse_c = 1

neko = []
check = []
for i in range(10):
    neko.append([0, 0, 0, 0, 0, 0, 0, 0])
    check.append([0, 0, 0, 0, 0, 0, 0, 0])

def draw_neko():
    for y in range(10):
        for x in range(8):
            if neko[y][x] > 0:
                cvs.create_image(x*72+60, y*72+60, image=img_neko[neko[y][x]], tag="NEKO")

def check():
    for y in range(10):
        for x in range(8):
            check[y][x] = neko[y][x]

    for y in range(1, 9):
        for x in range(8):
            if check[y][x] > 0:
                if check[y-1][x] == check[y][x] and check[y+1][x] == check[y][x]:
                    neko[y-1][x] = 7
                    neko[y][x] = 7
                    neko[y+1][x] = 7

    for y in range(10):
        for x in range(1, 7):
            if check[y][x] > 0:
                if check[y][x-1] == check[y][x] and check[y][x+1] == check[y][x]:
                    neko[y][x-1] = 7
                    neko[y][x] = 7
                    neko[y+1][x] = 7

        for y in range(1,9):
            for x in range(1, 7):
                if check[y][x] > 0:
                    if check[y-1][x-1] == check[y][x] and check[y+1][x+1] == check[y][x]:
                        neko[y-1][x-1] = 7
                        neko[y][x] = 7
                        neko[y+1][x+1] = 7
                    if check[y+1][x-1] == check[y][x] and check[y-1][x+1] == check[y][x]:
                        neko[y+1][x-1] = 7
                        neko[y][x] = 7
                        neko[y-1][x+1] = 7

def game_main():
    global cursor_x, cursor_y, mouse_c
    if 660 <= mouse_x and mouse_x < 840 and 100 <= mouse_y and mouse_y < 160 and mouse_c == 1:
        mouse_c = 0
        check_neko()
    if 24 <= mouse_x and mouse_x < 24+72*8 and 24 <= mouse_y and mouse_y and mouse_y < 24+72*10:
        cursor_x = int((mouse_x-24)/72)
        cursor_y = int((mouse_y-24)/72)
        if mouse_c == 1:
            mouse_c = 0
            neko[cursor_y][cursor_x] = random.randint(1, 2)
            cvs.delete("CURSOR")
            cvs.create_image(cursor_x*72+60, cursor=y*72+60, image=cursor, tag="CURSOR")
            cvs.delete("NEKO")
            draw_neko()
            root.after(100, game_main)

root = tkinter.Tk()
root.title("縦、横、斜めに3つ以上並んだか")
root.resizable(False, False)
root.bind("<Motion>",mouse_move)
root.bind("<ButtonPress>", mouse_move)
cvs = tkinter.Canvas(root, width=912, height=768)
cvs.pack()

bg = tkinter.PhotoImage(file="neko_bg.png")
cursor = tkinter.PhotoImage(file="neko_cursor.png")
img_neko = [
    None,
    tkinter.PhotoImage(file="neko1.png"),
    tkinter.PhotoImage(file="neko2.png"),
    tkinter.PhotoImage(file="neko3.png"),
    tkinter.PhotoImage(file="neko4.png"),
    tkinter.PhotoImage(file="neko5.png"),
    tkinter.PhotoImage(file="neko6.png"),
    tkinter.PhotoImage(file="neko_niku.png")
]

cvs.create_image(456, 384, image=bg)
cvs.create_rectangle(660, 100, 840, 160, fill = "white")
cvs.create_text(750, 130, text="テスト", fill="red", font=("Times New Roman", 30))
game_main()
root.mainloop()
